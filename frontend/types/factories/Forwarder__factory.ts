/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Forwarder, ForwarderInterface } from "../Forwarder";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "eip712Domain",
    inputs: [],
    outputs: [
      {
        name: "fields",
        type: "bytes1",
        internalType: "bytes1",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        internalType: "string",
      },
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "verifyingContract",
        type: "address",
        internalType: "address",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "extensions",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "execute",
    inputs: [
      {
        name: "request",
        type: "tuple",
        internalType: "struct ERC2771Forwarder.ForwardRequestData",
        components: [
          {
            name: "from",
            type: "address",
            internalType: "address",
          },
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint48",
            internalType: "uint48",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeBatch",
    inputs: [
      {
        name: "requests",
        type: "tuple[]",
        internalType: "struct ERC2771Forwarder.ForwardRequestData[]",
        components: [
          {
            name: "from",
            type: "address",
            internalType: "address",
          },
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint48",
            internalType: "uint48",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "refundReceiver",
        type: "address",
        internalType: "address payable",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "verify",
    inputs: [
      {
        name: "request",
        type: "tuple",
        internalType: "struct ERC2771Forwarder.ForwardRequestData",
        components: [
          {
            name: "from",
            type: "address",
            internalType: "address",
          },
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint48",
            internalType: "uint48",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "EIP712DomainChanged",
    inputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "ExecutedForwardRequest",
    inputs: [
      {
        name: "signer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "success",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressInsufficientBalance",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC2771ForwarderExpiredRequest",
    inputs: [
      {
        name: "deadline",
        type: "uint48",
        internalType: "uint48",
      },
    ],
  },
  {
    type: "error",
    name: "ERC2771ForwarderInvalidSigner",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC2771ForwarderMismatchedValue",
    inputs: [
      {
        name: "requestedValue",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC2771UntrustfulTarget",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
      {
        name: "forwarder",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "FailedInnerCall",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidAccountNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
      {
        name: "currentNonce",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b5060408051808201825260098152682337b93bb0b93232b960b91b602080830191909152825180840190935260018352603160f81b908301529081906200005b8260006200010a565b610120526200006c8160016200010a565b61014052815160208084019190912060e052815190820120610100524660a052620000fa60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000375565b60006020835110156200012a57620001228362000143565b90506200013d565b8162000137848262000234565b5060ff90505b92915050565b600080829050601f815111156200017a578260405163305a27a960e01b815260040162000171919062000300565b60405180910390fd5b8051620001878262000350565b179392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001ba57607f821691505b602082108103620001db57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022f57600081815260208120601f850160051c810160208610156200020a5750805b601f850160051c820191505b818110156200022b5782815560010162000216565b5050505b505050565b81516001600160401b038111156200025057620002506200018f565b6200026881620002618454620001a5565b84620001e1565b602080601f831160018114620002a05760008415620002875750858301515b600019600386901b1c1916600185901b1785556200022b565b600085815260208120601f198616915b82811015620002d157888601518255948401946001909101908401620002b0565b5085821015620002f05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b818110156200032f5785810183015185820160400152820162000311565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620001db5760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611302620003d060003960006104630152600061043101526000610c9501526000610c6d01526000610bc801526000610bf201526000610c1c01526113026000f3fe60806040526004361061005a5760003560e01c806384b0196e1161004357806384b0196e146100e5578063ccf96b4a1461010d578063df905caf1461012257600080fd5b806319d8d38c1461005f5780637ecebe0014610094575b600080fd5b34801561006b57600080fd5b5061007f61007a366004610e21565b610135565b60405190151581526020015b60405180910390f35b3480156100a057600080fd5b506100d76100af366004610e85565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b60405190815260200161008b565b3480156100f157600080fd5b506100fa610167565b60405161008b9796959493929190610f06565b61012061011b366004610fc5565b6101c9565b005b610120610130366004610e21565b6102fe565b6000806000806101448561038b565b509250925092508280156101555750815b801561015e5750805b95945050505050565b60006060806000806000606061017b61042a565b61018361045c565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b73ffffffffffffffffffffffffffffffffffffffff811615600080805b8581101561029e578686828181106102005761020061104b565b9050602002810190610212919061107a565b6102209060400135846110e7565b925060006102518888848181106102395761023961104b565b905060200281019061024b919061107a565b86610489565b90508061028d5787878381811061026a5761026a61104b565b905060200281019061027c919061107a565b61028a9060400135846110e7565b92505b50610297816110fa565b90506101e6565b503482146102e6576040517f70647f79000000000000000000000000000000000000000000000000000000008152600481018390523460248201526044015b60405180910390fd5b80156102f6576102f684826106eb565b505050505050565b8060400135341461034757604080517f70647f790000000000000000000000000000000000000000000000000000000081529082013560048201523460248201526044016102dd565b610352816001610489565b610388576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60008060008060008061039d876107c6565b90925090506103ba6103b56040890160208a01610e85565b610948565b426103cb60a08a0160808b01611132565b65ffffffffffff16101583801561041957506103ea60208a018a610e85565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b919750955093509150509193509193565b60606104577f00000000000000000000000000000000000000000000000000000000000000006000610a11565b905090565b60606104577f00000000000000000000000000000000000000000000000000000000000000006001610a11565b600080600080600061049a8761038b565b935093509350935085156105c5578361050e576104bd6040880160208901610e85565b6040517fd2650cd100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201523060248201526044016102dd565b826105605761052360a0880160808901611132565b6040517f94eef58a00000000000000000000000000000000000000000000000000000000815265ffffffffffff90911660048201526024016102dd565b816105c557806105736020890189610e85565b6040517fc845a05600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016102dd565b8380156105cf5750815b80156105d85750825b156106e15773ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812080546001810190915590506060880135600061062460408b0160208c01610e85565b905060408a0135600061063a60a08d018d61115a565b61064760208f018f610e85565b604051602001610659939291906111c6565b6040516020818303038152906040529050600080600083516020850186888af19a505a9050610688818e610abe565b604080518781528c1515602082015273ffffffffffffffffffffffffffffffffffffffff8916917f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c910160405180910390a25050505050505b5050505092915050565b80471015610727576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016102dd565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610781576040519150601f19603f3d011682016040523d82523d6000602084013e610786565b606091505b50509050806107c1576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008080806109226107db60c087018761115a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061091c92507f7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac9150610843905060208a018a610e85565b61085360408b0160208c01610e85565b60408b013560608c013561086d6100af60208f018f610e85565b8d60800160208101906108809190611132565b8e8060a00190610890919061115a565b60405161089e9291906111ff565b60408051918290038220602083019990995273ffffffffffffffffffffffffffffffffffffffff97881690820152959094166060860152608085019290925260a084015260c083015265ffffffffffff1660e08201526101008101919091526101200160405160208183030381529060405280519060200120610ada565b90610b22565b509092509050600081600381111561093c5761093c61120f565b14959194509092505050565b6040513060248201526000908190604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f572b6c050000000000000000000000000000000000000000000000000000000017815282519293506000928392839290918391895afa92503d915060005190508280156109fb575060208210155b8015610a075750600081115b9695505050505050565b606060ff8314610a2b57610a2483610b6f565b9050610ab8565b818054610a379061123e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a639061123e565b8015610ab05780601f10610a8557610100808354040283529160200191610ab0565b820191906000526020600020905b815481529060010190602001808311610a9357829003601f168201915b505050505090505b92915050565b610acd603f6060830135611291565b821015610ad657fe5b5050565b6000610ab8610ae7610bae565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060008351604103610b5c5760208401516040850151606086015160001a610b4e88828585610ce6565b955095509550505050610b68565b50508151600091506002905b9250925092565b60606000610b7c83610de0565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015610c1457507f000000000000000000000000000000000000000000000000000000000000000046145b15610c3e57507f000000000000000000000000000000000000000000000000000000000000000090565b610457604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610d215750600091506003905082610dd6565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d75573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610dcc57506000925060019150829050610dd6565b9250600091508190505b9450945094915050565b600060ff8216601f811115610ab8576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215610e3357600080fd5b813567ffffffffffffffff811115610e4a57600080fd5b820160e08185031215610e5c57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461038857600080fd5b600060208284031215610e9757600080fd5b8135610e5c81610e63565b6000815180845260005b81811015610ec857602081850181015186830182015201610eac565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152610f4260e084018a610ea2565b8381036040850152610f54818a610ea2565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015610fb357835183529284019291840191600101610f97565b50909c9b505050505050505050505050565b600080600060408486031215610fda57600080fd5b833567ffffffffffffffff80821115610ff257600080fd5b818601915086601f83011261100657600080fd5b81358181111561101557600080fd5b8760208260051b850101111561102a57600080fd5b6020928301955093505084013561104081610e63565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff218336030181126110ae57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ab857610ab86110b8565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361112b5761112b6110b8565b5060010190565b60006020828403121561114457600080fd5b813565ffffffffffff81168114610e5c57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261118f57600080fd5b83018035915067ffffffffffffffff8211156111aa57600080fd5b6020019150368190038213156111bf57600080fd5b9250929050565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181811c9082168061125257607f821691505b60208210810361128b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000826112c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220e3480f7539cde32c78c773b800f6c45f10bda675a92e42b3cc2364c8395b66f164736f6c63430008150033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
